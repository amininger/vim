" Toggles syntax hilighting
function! ToggleSyntax()
	if exists("g:syntax_on")
		syntax off
	else
		syntax enable
	endif
endfunction

nmap <silent> ;s :call ToggleSyntax()<CR>

" Capitalize line, center and move to the next line
function! CapitalizeCenterAndMoveDown()
	s/\<./\u&/g
	center
	+1
endfunction

nmap <silent> \c :call CapitalizeCenterAndMoveDown()<CR>


highlight STANDOUT term=bold cterm=bold gui=bold
let s:words = [ "it's", "its", "your", "you're", "there", "their", "they're" ]

let s:words_matcher = 'match STANDOUT /\c\<\(' . join(s:words, '\|') . '\)\>/'

function! WordCheck()
	let w:check_words = exists('w:check_words') ? !w:check_words : 1

	if w:check_words
		exec s:words_matcher
	else
		match none
	endif
endfunction

nmap <silent> ;p :call WordCheck()<CR>

function! GetEditCommandForFile()
	let line_arr = split(getline('.'), "|")
	let filename = line_arr[0]
	let lineno = line_arr[1]
	return "e +".lineno." ".filename
endfunction
	
function! OpenFileUnderCursorInUpperWindow()
	let editcmd=GetEditCommandForFile()
	wincmd k
	execute(editcmd)
endfunction

nmap <silent> ;n :call OpenFileUnderCursorInUpperWindow()<CR>

function! OpenPrevFileInWindow()
	wincmd j
	execute "normal! k"
	let editcmd=GetEditCommandForFile()
	wincmd k
	execute(editcmd)
endfunction

function! OpenNextFileInWindow()
	wincmd j
	execute "normal! j"
	let editcmd=GetEditCommandForFile()
	wincmd k
	execute(editcmd)
endfunction


nnoremap <C-Up> :call OpenPrevFileInWindow()<CR>
nnoremap <C-Down> :call OpenNextFileInWindow()<CR>



